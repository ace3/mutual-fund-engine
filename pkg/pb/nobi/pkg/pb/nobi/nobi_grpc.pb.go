// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: nobi.proto

package nobi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NobiInvestmentService_AddUser_FullMethodName            = "/nobi.NobiInvestmentService/AddUser"
	NobiInvestmentService_UpdateTotalBalance_FullMethodName = "/nobi.NobiInvestmentService/UpdateTotalBalance"
	NobiInvestmentService_ListNAB_FullMethodName            = "/nobi.NobiInvestmentService/ListNAB"
	NobiInvestmentService_TopUp_FullMethodName              = "/nobi.NobiInvestmentService/TopUp"
	NobiInvestmentService_Withdraw_FullMethodName           = "/nobi.NobiInvestmentService/Withdraw"
	NobiInvestmentService_ListMembers_FullMethodName        = "/nobi.NobiInvestmentService/ListMembers"
)

// NobiInvestmentServiceClient is the client API for NobiInvestmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NobiInvestmentServiceClient interface {
	AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*AddUserResponse, error)
	UpdateTotalBalance(ctx context.Context, in *UpdateTotalBalanceRequest, opts ...grpc.CallOption) (*UpdateTotalBalanceResponse, error)
	ListNAB(ctx context.Context, in *ListNABRequest, opts ...grpc.CallOption) (*ListNABResponse, error)
	TopUp(ctx context.Context, in *TopUpRequest, opts ...grpc.CallOption) (*TopUpResponse, error)
	Withdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawResponse, error)
	ListMembers(ctx context.Context, in *ListMembersRequest, opts ...grpc.CallOption) (*ListMembersResponse, error)
}

type nobiInvestmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNobiInvestmentServiceClient(cc grpc.ClientConnInterface) NobiInvestmentServiceClient {
	return &nobiInvestmentServiceClient{cc}
}

func (c *nobiInvestmentServiceClient) AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*AddUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddUserResponse)
	err := c.cc.Invoke(ctx, NobiInvestmentService_AddUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nobiInvestmentServiceClient) UpdateTotalBalance(ctx context.Context, in *UpdateTotalBalanceRequest, opts ...grpc.CallOption) (*UpdateTotalBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTotalBalanceResponse)
	err := c.cc.Invoke(ctx, NobiInvestmentService_UpdateTotalBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nobiInvestmentServiceClient) ListNAB(ctx context.Context, in *ListNABRequest, opts ...grpc.CallOption) (*ListNABResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNABResponse)
	err := c.cc.Invoke(ctx, NobiInvestmentService_ListNAB_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nobiInvestmentServiceClient) TopUp(ctx context.Context, in *TopUpRequest, opts ...grpc.CallOption) (*TopUpResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TopUpResponse)
	err := c.cc.Invoke(ctx, NobiInvestmentService_TopUp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nobiInvestmentServiceClient) Withdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WithdrawResponse)
	err := c.cc.Invoke(ctx, NobiInvestmentService_Withdraw_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nobiInvestmentServiceClient) ListMembers(ctx context.Context, in *ListMembersRequest, opts ...grpc.CallOption) (*ListMembersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMembersResponse)
	err := c.cc.Invoke(ctx, NobiInvestmentService_ListMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NobiInvestmentServiceServer is the server API for NobiInvestmentService service.
// All implementations must embed UnimplementedNobiInvestmentServiceServer
// for forward compatibility.
type NobiInvestmentServiceServer interface {
	AddUser(context.Context, *AddUserRequest) (*AddUserResponse, error)
	UpdateTotalBalance(context.Context, *UpdateTotalBalanceRequest) (*UpdateTotalBalanceResponse, error)
	ListNAB(context.Context, *ListNABRequest) (*ListNABResponse, error)
	TopUp(context.Context, *TopUpRequest) (*TopUpResponse, error)
	Withdraw(context.Context, *WithdrawRequest) (*WithdrawResponse, error)
	ListMembers(context.Context, *ListMembersRequest) (*ListMembersResponse, error)
	mustEmbedUnimplementedNobiInvestmentServiceServer()
}

// UnimplementedNobiInvestmentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNobiInvestmentServiceServer struct{}

func (UnimplementedNobiInvestmentServiceServer) AddUser(context.Context, *AddUserRequest) (*AddUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedNobiInvestmentServiceServer) UpdateTotalBalance(context.Context, *UpdateTotalBalanceRequest) (*UpdateTotalBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTotalBalance not implemented")
}
func (UnimplementedNobiInvestmentServiceServer) ListNAB(context.Context, *ListNABRequest) (*ListNABResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNAB not implemented")
}
func (UnimplementedNobiInvestmentServiceServer) TopUp(context.Context, *TopUpRequest) (*TopUpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopUp not implemented")
}
func (UnimplementedNobiInvestmentServiceServer) Withdraw(context.Context, *WithdrawRequest) (*WithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withdraw not implemented")
}
func (UnimplementedNobiInvestmentServiceServer) ListMembers(context.Context, *ListMembersRequest) (*ListMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMembers not implemented")
}
func (UnimplementedNobiInvestmentServiceServer) mustEmbedUnimplementedNobiInvestmentServiceServer() {}
func (UnimplementedNobiInvestmentServiceServer) testEmbeddedByValue()                               {}

// UnsafeNobiInvestmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NobiInvestmentServiceServer will
// result in compilation errors.
type UnsafeNobiInvestmentServiceServer interface {
	mustEmbedUnimplementedNobiInvestmentServiceServer()
}

func RegisterNobiInvestmentServiceServer(s grpc.ServiceRegistrar, srv NobiInvestmentServiceServer) {
	// If the following call pancis, it indicates UnimplementedNobiInvestmentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NobiInvestmentService_ServiceDesc, srv)
}

func _NobiInvestmentService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NobiInvestmentServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NobiInvestmentService_AddUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NobiInvestmentServiceServer).AddUser(ctx, req.(*AddUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NobiInvestmentService_UpdateTotalBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTotalBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NobiInvestmentServiceServer).UpdateTotalBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NobiInvestmentService_UpdateTotalBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NobiInvestmentServiceServer).UpdateTotalBalance(ctx, req.(*UpdateTotalBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NobiInvestmentService_ListNAB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNABRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NobiInvestmentServiceServer).ListNAB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NobiInvestmentService_ListNAB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NobiInvestmentServiceServer).ListNAB(ctx, req.(*ListNABRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NobiInvestmentService_TopUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NobiInvestmentServiceServer).TopUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NobiInvestmentService_TopUp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NobiInvestmentServiceServer).TopUp(ctx, req.(*TopUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NobiInvestmentService_Withdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NobiInvestmentServiceServer).Withdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NobiInvestmentService_Withdraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NobiInvestmentServiceServer).Withdraw(ctx, req.(*WithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NobiInvestmentService_ListMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NobiInvestmentServiceServer).ListMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NobiInvestmentService_ListMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NobiInvestmentServiceServer).ListMembers(ctx, req.(*ListMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NobiInvestmentService_ServiceDesc is the grpc.ServiceDesc for NobiInvestmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NobiInvestmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nobi.NobiInvestmentService",
	HandlerType: (*NobiInvestmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUser",
			Handler:    _NobiInvestmentService_AddUser_Handler,
		},
		{
			MethodName: "UpdateTotalBalance",
			Handler:    _NobiInvestmentService_UpdateTotalBalance_Handler,
		},
		{
			MethodName: "ListNAB",
			Handler:    _NobiInvestmentService_ListNAB_Handler,
		},
		{
			MethodName: "TopUp",
			Handler:    _NobiInvestmentService_TopUp_Handler,
		},
		{
			MethodName: "Withdraw",
			Handler:    _NobiInvestmentService_Withdraw_Handler,
		},
		{
			MethodName: "ListMembers",
			Handler:    _NobiInvestmentService_ListMembers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nobi.proto",
}
